A normal listener use case:

Understanding the location listener example on developer.android.com website.

1.  Usually we create listeners in two ways:
    A.  Creating an interface and make observer/listener/subscriber class extend it.
        give the observable class an instance on this class to call methods on it.
    B.  Create a observer/listener/subscriber class and instantiate it in observable
        . Then call the methods of subscriber in observable class to trigger events.

2.  Same thing is happening in below code, we are creating an observer class MyLocationListener
    and instantiating in our activity's onCreate to listen to activity lifecycle events.
    We are sending events in activity's onStart() and onStop().
      class MyLocationListener {
      public MyLocationListener(Context context, Callback callback) {
              // ...
          }

          void start() {
              // connect to system location service
          }

          void stop() {
              // disconnect from system location service
          }
      }

      class MyActivity extends AppCompatActivity {
          private MyLocationListener myLocationListener;

          @Override
          public void onCreate(...) {
              myLocationListener = new MyLocationListener(this, (location) -> {
                  // update UI
              });
          }

          @Override
          public void onStart() {
              super.onStart();
              myLocationListener.start();
              // manage other components that need to respond
              // to the activity lifecycle
          }

          @Override
          public void onStop() {
              super.onStop();
              myLocationListener.stop();
              // manage other components that need to respond
              // to the activity lifecycle
          }
      }
3.  Although its cleaner than writing logic within the activity. The issue here
    is that we have to add many listeners on activity lifecycle methods.
    Another bigger issue is that if we are doing too much work in our observer
    class then it can extend even after the activity has stopped/destroyed. this
    can end up crashing our app.

Lifecycle:

1.  Lifecycle class holds the information about the lifecycle STATE of the component
    /observable class(Activity/Fragment).
2.  Allows observers to know this state.
3.  Lifecycle is an abstract class with 2 enum defined as nested classes.
    Event - Lifecycle events that map to callback events from activities and fragments.
      onStart, onCreate, onStop, onPause....etc.
    State - The current state of the component.

4.  To get the lifecycle of a LifecycleOwner we have to call mylifecycleOwner.getLifecycle()
    this will return an instance of Lifecycle of this this owner.

    myLifecycleOwner.getLifecycle().addObserver(new MyObserver());

5.  We can then call addObserver on this Lifecycle object to add the current class as its Observer.
6.  Notice that the addObserver method takes a LifecycleObserver as its argument. This means
    our observer class has to implement LifecycleObserver interface.

7.  The only thing left for us to do is to annotate our lifecycle observer methods
    with annotation OnLifecycleEvent to make them lifecycle aware.

    public class MyObserver implements LifecycleObserver {
    @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)
    public void connectListener() {
        ...
    }

    @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)
    public void disconnectListener() {
        ...
    }
    }

8.  Notice that the LifecycleObserver interface has no methods defined.

MyLocationListener example with lifecycle observer implemented:

    class MyLocationListener implements LifecycleObserver {
        private boolean enabled = false;
        public MyLocationListener(Context context, Lifecycle lifecycle, Callback callback) {
           ...
        }

        @OnLifecycleEvent(Lifecycle.Event.ON_START)
        void start() {
            if (enabled) {
               // connect
            }
        }

        public void enable() {
            enabled = true;
            if (lifecycle.getCurrentState().isAtLeast(STARTED)) {
                // connect if not connected
            }
        }

        @OnLifecycleEvent(Lifecycle.Event.ON_STOP)
        void stop() {
            // disconnect if connected
        }
    }

    //activity

    class MyActivity extends AppCompatActivity {
        private MyLocationListener myLocationListener;

        public void onCreate(...) {
            myLocationListener = new MyLocationListener(this, getLifecycle(), location -> {
                // update UI
            });
            Util.checkUserStatus(result -> {
                if (result) {
                    myLocationListener.enable();
                }
            });
      }
    }

1.  Not our LifecycleOwner has our LifecycleObserver instance created and our LifecycleObserver
    has Lifecycle instance to query lifecycle events.
2.  AppCompatActivity already extends Lifecycle.
